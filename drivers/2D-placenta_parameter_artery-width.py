####################
# SIMULATION SETUP #
####################
# Nominal values of parameters.
artery_location_nominal   = 0.5
vein_location_1_nominal   = 0.2
vein_location_2_nominal   = 0.8

# Geometry measurements.
central_cavity_nominal            = 0.25   # 10mm
central_cavity_transition_nominal = 0.05   # 2mm
pipe_transition_nominal           = 0.03   # 2mm
artery_length_nominal             = 0.05   # 2mm
artery_width_nominal              = 0.0625 # 2.5mm

# Mesh.
mesh_resolution_default = 0.15

# Unused.
log_cavity_transition = False

# Problem parameters.
L   = 0.04     # m
U   = 0.1 # m/s
k   = 1e-8     # m^2
mu  = 4e-3     # Pa s
rho = 1e3      # kg/m^3
D   = 1.667e-9 # m^2/s
R   = 1.667e-2 # m^2/s

##################
# SIMULATION RUN #
##################
# Clean and compile.
from programs import velocity_transport
# velocity_transport.setup(clean=True, terminal_output=True, compile=False, programs_to_compile='nsb-transport_placenta')
run_no = 0

import matplotlib.pyplot as plt
import numpy as np

# Sampling parameters.
no_samples    = 10
no_subsamples = 20
variance      = 0.002

#############################
# VARY CENTRAL CAVITY WIDTH #
#############################
# Run simulations.
Îµ = 0.001
artery_width_means = np.linspace(0.0125, 0.2, no_samples)
print(f"Varying wall height ratio mean between {artery_width_means[0]} and {artery_width_means[-1]}.")

# integral = []
# artery_widths = []
# for i in range(0, no_samples):
#     artery_width_mean = artery_width_means[i]

#     for j in range(0, no_subsamples):
#         success = False
#         while not success:
#           artery_width = np.random.normal(artery_width_mean, variance)

#           success = velocity_transport.run(run_no, "nsb", "placenta", artery_location_nominal, vein_location_1_nominal, vein_location_2_nominal, central_cavity_nominal, central_cavity_transition_nominal, pipe_transition_nominal, artery_length_nominal, mesh_resolution_default, log_cavity_transition, L, U, mu, rho, k, D, R, terminal_output=True, verbose_output=False, velocity_oscillation_tolerance=1e-4, transport_oscillation_tolerance=1e-1, plot=False, rerun_on_oscillation=False, normal_vessels=[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], error_on_fail=False, extra_text=f"artery_width: {artery_width}", wall_height_ratio=1, artery_width=artery_width)
#         artery_widths.append(artery_width)
#         integral.append(velocity_transport.integral_cache[-1])
#         run_no += 1

# from miscellaneous import get_transport_reaction_integral

# for i in range(0, no_samples):
#   for j in range(0, no_subsamples):
#     run_no = i*no_subsamples+j
#     aptofem_run_no = run_no + 1
#     reaction_integral = get_transport_reaction_integral.get_transport_reaction_integral('velocity-transport', 'placenta', aptofem_run_no)
#     integral.append(reaction_integral)

integral = [0.00099675, 0.00099871, 0.00100317, 0.00100326, 0.0009903 , 0.00100173
, 0.00098548, 0.00100344, 0.00100477, 0.00099687, 0.00100339, 0.00099857
, 0.00100429, 0.00100386, 0.00100071, 0.00100405, 0.00098633, 0.00100135
, 0.00100074, 0.00098932, 0.00098801, 0.00098753, 0.00098784, 0.00098804
, 0.00098876, 0.00099567, 0.00098844, 0.00099212, 0.00098799, 0.00099143
, 0.00098901, 0.00099215, 0.00098944, 0.00098761, 0.00098772, 0.00099137
, 0.00098854, 0.00099145, 0.00098946, 0.00099135, 0.00098354, 0.00098411
, 0.00098383, 0.00098359, 0.00098383, 0.00098361, 0.00098431, 0.0009837
, 0.00098352, 0.00098428, 0.0009837 , 0.00098357, 0.00098385, 0.00098438
, 0.00098352, 0.00098473, 0.00098431, 0.00098359, 0.00098359, 0.00098286
, 0.00098551, 0.00098459, 0.00098449, 0.00098442, 0.00098532, 0.00098551
, 0.00098574, 0.00098475, 0.00098574, 0.00098387, 0.00098534, 0.00098461
, 0.00098448, 0.00098556, 0.00098481, 0.00098623, 0.00098506, 0.00098621
, 0.00098426, 0.00098618, 0.00098512, 0.00098452, 0.00098543, 0.00098546
, 0.00098574, 0.0009853 , 0.00098593, 0.00098597, 0.00098503, 0.00098573
, 0.00098627, 0.00098466, 0.00098586, 0.00098601, 0.00098492, 0.00098581
, 0.0009863 , 0.00098571, 0.00098573, 0.00098493, 0.0009821 , 0.00098169
, 0.00098236, 0.000982  , 0.00098251, 0.00098151, 0.00098254, 0.00098249
, 0.00098175, 0.00098458, 0.00098236, 0.00098262, 0.0009827 , 0.0009821
, 0.00098279, 0.00098242, 0.00098237, 0.00098232, 0.00098246, 0.00098183
, 0.00098185, 0.00098248, 0.00098164, 0.00098259, 0.00098222, 0.00098263
, 0.00098118, 0.00098232, 0.00098232, 0.00098222, 0.00098255, 0.00098233
, 0.0009826 , 0.00098329, 0.00098158, 0.00098234, 0.0009825 , 0.00098244
, 0.00098205, 0.00098305, 0.00098446, 0.00098375, 0.00098377, 0.00098403
, 0.0009843 , 0.00098402, 0.00098414, 0.00098409, 0.0009836 , 0.0009841
, 0.00098413, 0.00098461, 0.0009842 , 0.00098433, 0.00098426, 0.0009842
, 0.00098409, 0.00098397, 0.00098381, 0.00098369, 0.00098254, 0.00098207
, 0.00098182, 0.00098101, 0.00098151, 0.00098386, 0.00098379, 0.00098379
, 0.00098213, 0.00098199, 0.000982  , 0.00098377, 0.00098137, 0.00098162
, 0.00098383, 0.00098138, 0.00098405, 0.00098211, 0.00098199, 0.00098391
, 0.00098298, 0.00098302, 0.00098216, 0.00098317, 0.00098189, 0.00098248
, 0.00098224, 0.00098247, 0.00098281, 0.0009827 , 0.00098273, 0.00098314
, 0.00098253, 0.00098311, 0.00098349, 0.00098223, 0.00098257, 0.00098265
, 0.00098258, 0.000983]
artery_widths = [0.016664574051224713, 0.011140104626286557, 0.013955145828930782, 0.01383964041971585, 0.010078231785053009, 0.012084064712222002, 0.008423260016647158, 0.013823240918597436, 0.012775407199453644, 0.01694265008928579, 0.01376040019264104, 0.011058643296925111, 0.013066322384411898, 0.013364899774042866, 0.012286773163347893, 0.013201453928360552, 0.008590179241887555, 0.01199692402710743, 0.012321995587877955, 0.010837437923248015, 0.036049142472823585, 0.03691482904567259, 0.034096869261019534, 0.03553054027844891, 0.033088067751861704, 0.03014454916302272, 0.03447870062404534, 0.031111662212838037, 0.03573414048055753, 0.03037476799330468, 0.03292150615658367, 0.030909073920955252, 0.03205234061990828, 0.03462257649306141, 0.03525348278390705, 0.03149073705841348, 0.0332396380954995, 0.031607945968775586, 0.03209427494189414, 0.03166789444862667, 0.051727931169397834, 0.0509589582044338, 0.05132822238761996, 0.0525318520373179, 0.05565433484465342, 0.056016666897243786, 0.053415747828978365, 0.05542868067661076, 0.05502853211826563, 0.05314823620042761, 0.05281930402090844, 0.05596604867368509, 0.053005181027903796, 0.051935400862019504, 0.052150492376362, 0.05329237003224341, 0.05341487039328528, 0.05561899391972705, 0.05215855584886138, 0.054251262348737846, 0.07181678875480671, 0.0768388109470408, 0.07844937111075512, 0.07871958790116872, 0.07405594940968524, 0.07132767482615263, 0.0737937086874061, 0.07777296313278725, 0.07379893759248739, 0.07758164852667392, 0.07068717196089558, 0.07887717539742052, 0.07832704487769646, 0.07478992939417728, 0.07762112837435056, 0.07475746559485112, 0.07526612815599537, 0.07475539756903458, 0.07735992148190442, 0.07461479712901384, 0.09671313123740642, 0.09825706195897199, 0.09417191699713205, 0.09424585673642409, 0.09438886596921896, 0.09710773191358876, 0.09551347438542103, 0.09649676639633192, 0.09723218371844505, 0.09386927838762561, 0.09444289651564215, 0.09796082951621235, 0.09369786502190702, 0.09604755911179172, 0.09916508057866849, 0.096409809714643, 0.0947327460650631, 0.09624602678110053, 0.09384046732730214, 0.0988443092329962, 0.11863501449389577, 0.11645480654403693, 0.11609494169585391, 0.115369002988358, 0.11625056556159559, 0.11722442836208509, 0.11279624096470982, 0.11455170203049223, 0.11801896955348871, 0.1225545038522042, 0.11560201978164925, 0.11362628671518828, 0.11676464902990681, 0.1190083776407849, 0.1137886962229737, 0.11667778692487782, 0.11583048854513932, 0.1171423372052054, 0.11483223272948959, 0.11311462363492497, 0.13803259754256125, 0.13839667467362674, 0.138677737808373, 0.13348932449682613, 0.1383151957875862, 0.13700748439019395, 0.1382317325702333, 0.13639632527944404, 0.1390402004438519, 0.1380469813536059, 0.13663463881147087, 0.13780399856161854, 0.1377859856158371, 0.1372941768028496, 0.13834099285708645, 0.13855006896685518, 0.1370928289765435, 0.135789036727113, 0.14143004336580414, 0.13571024294309797, 0.15761987447770523, 0.15662576290955246, 0.16142629894731836, 0.1606178454358104, 0.15743138271257145, 0.15939506920676963, 0.15995710235692867, 0.1572428304683983, 0.1556931017300318, 0.15638846076783697, 0.1577585590307996, 0.15612431606289098, 0.15881743489534467, 0.15479596398036327, 0.157357865247969, 0.1576374182768942, 0.16138470040854028, 0.1580078201946651, 0.1575879811619386, 0.15707980387196896, 0.17703506574244463, 0.17841685306306318, 0.17801926082380706, 0.1794466521394703, 0.1795521107750751, 0.1807873344110451, 0.18228168976363177, 0.1806062876865554, 0.17848304527359718, 0.17515495702300243, 0.18010083257702802, 0.1815407639622852, 0.18006129307091528, 0.17842457207769766, 0.18148836984035815, 0.1788897950174713, 0.1821052002743035, 0.173872342587532, 0.17757781298921552, 0.18304963567670351, 0.1974290823011826, 0.20149042708607254, 0.19827711135404857, 0.20202397245104914, 0.19898634830706463, 0.2034655862284184, 0.20362443989671883, 0.19856546796291297, 0.20029405642768117, 0.20044904078841216, 0.2007492100834598, 0.19614378412691333, 0.20014876384297114, 0.19636274472251009, 0.197443248550749, 0.20015977209853397, 0.1996619566208275, 0.20046042820739818, 0.20147458410565372, 0.19664997099734607]

integral = np.array(integral)
integral_average = integral.reshape([no_samples, no_subsamples]).mean(axis=1)
artery_widths = 1000*L*np.array(artery_widths)
artery_width_means = 1000*L*np.array(artery_width_means)

cmap = plt.get_cmap('tab10')

import scipy.stats as stats

# Plot.
plt.plot(artery_width_means, integral_average, '--', color='k')
for i in range(0, no_samples):
  plt.boxplot(integral[i*no_subsamples:(i+1)*no_subsamples], positions=[artery_width_means[i]], widths=0.01*L*1000, labels=[f'{artery_width_means[i]:.2f}'])

  # Plot normal distribution on each mean.
  # normal_x = np.linspace(artery_width_means[i] - 3*variance*L*1000, artery_width_means[i] + 3*variance*L*1000, 100)
  # plt.plot(normal_x, 0.1*(integral_average.max()-integral_average.min())*stats.norm.pdf(normal_x, artery_width_means[i], variance*L*1000)/stats.norm.pdf(artery_width_means[i], artery_width_means[i], variance*L*1000) + integral_average.min() - 0.2*(integral_average.max() - integral_average.min()), color='k', alpha=0.5)
  # plt.scatter(artery_widths[i*no_subsamples:(i+1)*no_subsamples], 0.1*(integral_average.max()-integral_average.min())*stats.norm.pdf(artery_widths[i*no_subsamples:(i+1)*no_subsamples], artery_width_means[i], variance*L*1000)/stats.norm.pdf(artery_width_means[i], artery_width_means[i], variance*L*1000) + integral_average.min() - 0.2*(integral_average.max() - integral_average.min()), color='k', s=0.1)
plt.vlines(artery_width_nominal*L*1000, 0.0003, 0.0013, color='k', linestyle='-')
plt.xlabel("Artery width (mm)")
plt.ylabel("Integral")
# plt.xlim([2, 8.3])
plt.title("Varying artery widths")
plt.ylim([0.0003, 0.0013])
plt.savefig("./images/vary_artery-widths_fixed-y.png", dpi=300)

########################################
# VARY CENTRAL CAVITY TRANSITION WIDTH #
########################################

# Vary permeability.

# Vary artery width.

# Vary vein width.

# Vary number of arteries.

# Vary number of veins (less).

# Vary number of veins (more).






# Output measured quantities.
from miscellaneous import output
output.output("##########################", True)
# output.output(f"Fluxes: {velocity_transport.flux_cache}", True)
output.output(f"Integrals: {integral}", True)
output.output(f"artery_widths: {artery_widths}", True)

# Save output.
output.save()