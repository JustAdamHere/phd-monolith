import numpy as np

# Taken from https://apps.automeris.io/wpd/
#  Data from Fig4 H in [Carson, 2021] 
data = np.array([
  [0.32918, 140.66],
	[0.33902, 140.40],
	[0.34897, 139.08],
	[0.35569, 137.32],
	[0.36334, 135.65],
	[0.37005, 133.41],
	[0.37473, 131.14],
	[0.37795, 129.03],
	[0.38308, 126.76],
	[0.38656, 124.43],
	[0.38984, 122.33],
	[0.39113, 120.24],
	[0.39476, 118.02],
	[0.39804, 115.52],
	[0.40131, 113.00],
	[0.40459, 110.43],
	[0.40787, 107.93],
	[0.41291, 105.52],
	[0.41607, 103.29],
	[0.41935, 101.59],
	[0.42590, 99.682],
	[0.43273, 97.637],
	[0.44038, 95.718],
	[0.44722, 93.596],
	[0.45377, 91.417],
	[0.46033, 89.086],
	[0.46689, 86.820],
	[0.47344, 84.641],
	[0.48000, 82.591],
	[0.48656, 80.713],
	[0.49377, 78.858],
	[0.50213, 77.477],
	[0.50869, 76.139],
	[0.51771, 74.945],
	[0.52754, 73.420],
	[0.53738, 71.981],
	[0.54721, 70.600],
	[0.55705, 69.420],
	[0.56689, 68.327],
	[0.57672, 67.406],
	[0.58656, 66.572],
	[0.59639, 65.852],
	[0.60623, 65.133],
	[0.61606, 64.356],
	[0.62590, 63.666],
	[0.63574, 62.975],
	[0.64557, 62.285],
	[0.65541, 61.594],
	[0.66524, 60.904],
	[0.67508, 60.127],
	[0.68492, 59.321],
	[0.69475, 58.602],
	[0.70459, 57.854],
	[0.71442, 57.106],
	[0.72426, 56.329],
	[0.73409, 55.581],
	[0.74393, 54.832],
	[0.75377, 54.113],
	[0.76360, 53.308],
	[0.77344, 52.617],
	[0.78327, 51.926],
	[0.79311, 51.236],
	[0.80295, 50.517],
	[0.81278, 49.941],
	[0.82262, 50.171],
	[0.83196, 51.685],
	[0.83819, 54.305],
	[0.84100, 56.760],
	[0.84475, 58.961],
	[0.84680, 61.982],
	[0.85008, 65.176],
	[0.85335, 68.197],
	[0.85695, 71.300],
	[0.86041, 74.446],
	[0.86401, 77.218],
	[0.86770, 79.817],
	[0.87016, 82.425],
	[0.87344, 84.612],
	[0.87671, 86.684],
	[0.87999, 88.755],
	[0.88327, 90.827],
	[0.88655, 92.899],
	[0.88983, 94.970],
	[0.89311, 97.042],
	[0.89639, 99.114],
	[0.89967, 101.21],
	[0.90294, 103.37],
	[0.90622, 105.56],
	[0.90950, 107.75],
	[0.91278, 109.79],
	[0.91641, 111.95],
	[0.91969, 114.20],
	[0.92453, 116.63],
	[0.92945, 119.22],
	[0.93475, 121.79],
	[0.93901, 124.43],
	[0.94393, 126.48],
	[0.94896, 128.58],
	[0.95540, 130.78],
	[0.96196, 132.87],
	[0.96879, 134.98],
	[0.97709, 136.91],
	[0.98655, 139.22],
  [0.99638, 140.40]
])

t_range = data[-1][0] - data[0][0]
u_max   = np.max(data[:, 1])

data[:, 0] = (data[:, 0] - data[0][0]) / t_range
data[:, 1] = (data[:, 1]             ) / u_max

# Calculate Fourier coefficients.
u_fft = np.fft.fft(data[:, 1])
print(f"All coefficients: {u_fft}")
print(f"Real: {u_fft.real}")
print(f"Imag: {u_fft.imag}")
print(f"Length: {len(u_fft)}")
print(f"...: {np.fft.fftfreq(len(u_fft))}")

def f(t, C):
  # N  = len(C)
  # Nf = int(np.floor(N/2))
  # Nc = int(np.ceil (N/2))

  # value = 0
  # for n in range(0, Nc):
  #   A_n =       C[n] + C[-n]
  #   B_n = 1j * (C[n] - C[-n])

  #   value += A_n * np.cos(2*np.pi*n*t/N)
  #   value += B_n * np.sin(2*np.pi*n*t/N)

  #   # value += C[n] * np.exp(2j*np.pi*t*n/N)
  # return value/(2*N)

  # value = 0
  # for i in range(len(C)):
  #   n = i - len(C)//2
  #   value += C[n] * np.exp(2j*np.pi*n*t)
  # return value/(len(C))

  # value = 0
  # for i in range(len(C)):
  #   n = i - len(C)//2
  #   value += C[n] * np.exp(2j*np.pi*n*t)
  # return value/(len(C))

  # N = len(C)

  # value = C[0]/2
  # for n in range(1, N):
  #   A_n = np.abs(C[n])
  #   φ_n = np.angle(C[n])

  #   value += A_n * np.cos(2*np.pi*n*t - φ_n)

  # return value

  # N = len(C)
  # result = C[0]  # DC component

  # for n in range(1, N):
  #   result += C[n] * np.exp(2j * np.pi * n * t / N)

  # return result

  result = 0

  N = len(C)

  Kn = np.fft.fftfreq(N)
  eikx = np.exp(2j * np.pi * t * N * np.outer(t, Kn))

  # return np.dot(C, eikx) / N

  return np.einsum('ab,b->a', eikx, C) / N

# Plot series.
import matplotlib.pyplot as plt
# plt.plot(data[:, 0], np.fft.ifft(u_fft))
# plt.plot(data[:, 0] + 1, np.fft.ifft(u_fft))
plt.plot(data[:, 0], data[:, 1], 'rx')
plt.plot(data[:, 0], f(data[:, 0], u_fft))